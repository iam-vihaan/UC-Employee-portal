# .github/workflows/deploy.yml
name: Infra

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  id-token: write

env:
  AWS_REGION: us-east-1
  CLUSTER_NAME: employee-directory-cluster
  FRONTEND_ECR_REPO: frontend
  BACKEND_ECR_REPO: backend

jobs:
  lint-and-security:
    name: Lint and Security Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.10.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::784733659029:role/oidc-role
          aws-region: us-east-1

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: v0.50.2

      - name: Run TFLint
        run: |
          cd terraform
          tflint --init && tflint -f compact
        continue-on-error: true

      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          working_directory: ./terraform
        continue-on-error: true

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: ./terraform
          framework: terraform
        continue-on-error: true

  deploy:
    name: Deploy EKS & App
    runs-on: ubuntu-latest
    needs: lint-and-security

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run YAML linting
        uses: ibiqlik/action-yamllint@v3
        continue-on-error: true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::784733659029:role/oidc-role
          aws-region: us-east-1

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push backend image
        run: |
          docker build -t ${{ env.BACKEND_ECR_REPO }} ./backend
          docker tag ${{ env.BACKEND_ECR_REPO }}:latest ${{ steps.login-ecr.outputs.registry }}/${{ env.BACKEND_ECR_REPO }}:latest
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.BACKEND_ECR_REPO }}:latest

      - name: Build and push frontend image
        run: |
          docker build -t ${{ env.FRONTEND_ECR_REPO }} ./frontend
          docker tag ${{ env.FRONTEND_ECR_REPO }}:latest ${{ steps.login-ecr.outputs.registry }}/${{ env.FRONTEND_ECR_REPO }}:latest
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.FRONTEND_ECR_REPO }}:latest

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name $CLUSTER_NAME --region $AWS_REGION

      - name: Apply Kubernetes manifests
        run: |
          kubectl apply -f k8s/namespaces/
          kubectl apply -f k8s/irsa/
          kubectl apply -f k8s/secrets/
          kubectl apply -f k8s/deployment/backend/
          kubectl apply -f k8s/deployment/frontend/
          kubectl apply -f k8s/ingress/
          kubectl apply -f k8s/autoscaling/
          kubectl apply -f k8s/monitoring/
